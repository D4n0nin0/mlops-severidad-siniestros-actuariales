name: Quick Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  quick-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Debug - Show project structure
      run: |
        echo "=== Project structure ==="
        find . -name "*.py" | head -20
        echo "=== Requirements ==="
        cat requirements.txt || echo "No requirements.txt found"
        echo "=== Python path ==="
        python -c "import sys; print('\n'.join(sys.path))"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install common dependencies por si faltan
        pip install pandas numpy scikit-learn pydantic

    - name: Test imports step by step
      run: |
        set -e  # Exit on any error
        
        echo "=== Testing data module import ==="
        python -c "
try:
    from src.data.make_dataset import generate_sample_data
    print('✅ Data module import successful')
except ImportError as e:
    print(f'❌ Import error: {e}')
    print('Trying to debug...')
    import sys
    sys.path.append('.')
    from src.data.make_dataset import generate_sample_data
    print('✅ Fixed with path adjustment')
except Exception as e:
    print(f'❌ Other error: {e}')
    raise
        "

        echo "=== Testing data generation ==="
        python -c "
from src.data.make_dataset import generate_sample_data
df = generate_sample_data()
print(f'Generated data shape: {df.shape}')
assert df.shape[0] == 1000, f'Expected 1000 rows, got {df.shape[0]}'
print('✅ Data generation test passed')
        "

        echo "=== Testing features module ==="
        python -c "
from src.features.build_features import create_feature_pipeline
pipeline = create_feature_pipeline()
print(f'Pipeline type: {type(pipeline)}')
print('✅ Features test passed')
        "

        echo "=== Testing API schema ==="
        python -c "
from src.api.app import ClaimFeatures
sample_data = {
    'edad': 45,
    'tipo_vehiculo': 'SUV',
    'antiguedad_vehiculo': 5,
    'region': 'Norte',
    'historial_siniestros': 2
}
claim = ClaimFeatures(**sample_data)
print(f'Claim object created: {claim}')
print('✅ API schema test passed')
        "

    - name: Check file structure
      run: |
        echo "=== Checking required files ==="
        for file in "Dockerfile" "requirements.txt" "src/api/app.py"; do
            if [ -f "$file" ]; then
                echo "✅ Found: $file"
            else
                echo "❌ Missing: $file"
                exit 1
            fi
        done
        
        if [ -f "models/best_model.pkl" ]; then
            echo "✅ Found model file"
        else
            echo "⚠️  Model file not found (might be generated later)"
        fi

    - name: Run validation script if exists
      run: |
        if [ -f "scripts/validate.py" ]; then
            python scripts/validate.py
        else
            echo "No validation script found, skipping"
        fi  